# (mostly) project-independent Makefile fragment for Unix - v. 2020-02-14
# - uses dependency files generated by gcc to automatically handle header dependencies
# - using a precompiled header with gcc (or clang) is not worth the hassle

# common C and C++ flags; always include debug info, use strip for packaging
CFLAGS += -MMD -g -Wall -Werror=return-type -Wno-strict-aliasing
#-Wshadow
# C++; -Wconditionally-supported catches passing non-POD to varargs fn
CXX = g++
CXXFLAGS += --std=c++14 -Werror=conditionally-supported -Wno-class-memaccess
#-fno-rtti -fno-exceptions -Wno-unused-parameter -Wno-unused-function -Wno-unused
# C
CC = gcc
CCFLAGS += --std=c99 -Werror=implicit-function-declaration -Werror=int-conversion
# linker
LD = g++
LDFLAGS +=

DEBUG ?= 0
ifneq ($(DEBUG), 0)
  CFLAGS += -O0 -DDEBUG
  # rdynamic needed to get backtrace symbols from, e.g., catchsegv
  LDFLAGS += -rdynamic
else
  # use ffunction-sections + gc-sections to remove unused functions
  CFLAGS += -O2 -DNDEBUG -ffunction-sections
  LDFLAGS += -Wl,--gc-sections
endif

ASAN ?= 0
ifneq ($(ASAN), 0)
  CFLAGS += -fsanitize=address
  #-fsanitize=undefined -fsanitize=float-divide-by-zero
  LDFLAGS += -fsanitize=address
endif

TSAN ?= 0
ifneq ($(TSAN), 0)
  CFLAGS += -fsanitize=thread
  LDFLAGS += -fsanitize=thread
endif

# disable optimizations which make profiling difficult, esp. inlining; frame pointer needed for sampling
# -fno-inline ... let's try w/o this
# valgrind doesn't support AVX512 yet
PROFILE ?= 0
ifneq ($(PROFILE), 0)
  CFLAGS += -fno-omit-frame-pointer -mno-avx512f
  LDFLAGS += -rdynamic -mno-avx512f
endif

# gprof: -pg; utrace: -pg or -finstrument-functions
TRACE ?= 0
ifneq ($(TRACE), 0)
  CFLAGS += -finstrument-functions
  LDFLAGS += -finstrument-functions -rdynamic
endif

# project independent stuff
# pkg-config headers and libraries
ifneq ($(PKGS),)
  CFLAGS += $(shell pkg-config --cflags $(PKGS))
  LIBS += $(shell pkg-config --libs $(PKGS))
endif

# assumes *FLAGS variables use deferred evaluation
CFLAGS += $(CFLAGS_PRIVATE)
CCFLAGS += $(CCFLAGS_PRIVATE)
CXXFLAGS += $(CXXFLAGS_PRIVATE)

# include files
INCFLAGS = $(INC:%=-I%) $(INC_PRIVATE:%=-I%) $(INCSYS:%=-isystem %) $(INCFILES:%=-include %)

# defines
CFLAGS += $(DEFS:%=-D%) $(DEFS_PRIVATE:%=-D%)

SRCBASE=$(basename $(SOURCES))
OBJ=$(SRCBASE:%=$(OBJDIR)/%.o)
DEPS=$(SRCBASE:%=$(OBJDIR)/%.d)
TGT=$(BUILDDIR)/$(TARGET)
# gcc will not create directories, so depend on existence of all directories in output folder
# sort removes duplicates (which cause make error)
BUILDDIRS=$(sort $(dir $(OBJ)))

.PHONY: all tgz real_tgz clean distclean sourcelist compile_commands

all: $(TGT)

tgz:
	make -f tests.mk
	sudo mount --bind $${HOME}/styluslabs $${HOME}/build-chroot$${HOME}/styluslabs/
	sudo mount --bind $${HOME}/maps $${HOME}/build-chroot$${HOME}/maps/
	sudo chroot --userspec=$${USER}:$${USER} $${HOME}/build-chroot/ /bin/bash -c "cd $${HOME}/maps/explore && make DEBUG=0 BUILDDIR=build/LinuxRel real_tgz"
	sudo umount $${HOME}/build-chroot$${HOME}/maps
	sudo umount $${HOME}/build-chroot$${HOME}/styluslabs

real_tgz: $(TGZ)

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $@ $<

$(OBJDIR)/%.o: %.cc
	$(CXX) -c $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $@ $<

$(OBJDIR)/%.o: %.c
	$(CC) -c $(CFLAGS) $(CCFLAGS) $(INCFLAGS) -o $@ $<

$(TGT): $(OBJ)
	$(LD) -o $@ $^ $(LDFLAGS) $(LIBS)

# strip $(TGT) -- remove symbols to get smaller exe
$(TGZ): $(TGT) $(DISTRES)
	strings $(TGT) | grep "^GLIBC_"
	mkdir -p $(BUILDDIR)/.dist
	strip -s -o $(BUILDDIR)/.dist/$(TARGET) $(TGT)
	rsync -Lvr --exclude .git $(DISTRES) $(BUILDDIR)/.dist
	(cd $(BUILDDIR) && mv .dist $(TGZ_FOLDER) && tar --remove-files -czvf $@ $(TGZ_FOLDER))

# files that need to be generated, downloaded, etc.
$(OBJ): $(GENERATED)

# | (pipe) operator causes make to just check for existence instead of timestamp
$(OBJ): | $(BUILDDIRS)

$(BUILDDIRS):
	mkdir -p $(BUILDDIRS)

clean:
	rm -f $(TGT) $(OBJ) $(DEPS)

distclean:
	rm -rf ./Debug ./Release

sourcelist:
	@printf '%s\n' $(SOURCES)

# generate compile_commands.json needed by clangd
CLANGD=$(SRCBASE:%=$(OBJDIR)/%.clangd)

$(OBJDIR)/%.clangd: %.cpp
	echo '  { "file": "$<", "directory": ".", "command": "clang++ $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $(@:%.clangd=%.o) -c $<" },' > $@

$(OBJDIR)/%.clangd: %.cc
	echo '  { "file": "$<", "directory": ".", "command": "clang++ $(CFLAGS) $(CXXFLAGS) $(INCFLAGS) -o $(@:%.clangd=%.o) -c $<" },' > $@

$(OBJDIR)/%.clangd: %.c
	echo '  { "file": "$<", "directory": ".", "command": "clang $(CFLAGS) $(CCFLAGS) $(INCFLAGS) -o $(@:%.clangd=%.o) -c $<" },' > $@

compile_commands: $(CLANGD)
	(echo '{'; cat $^; echo '}\n') > compile_commands.json
	rm $^

# dependency files generated by gcc (-MMD switch) ("-include" ignores file if missing)
-include $(DEPS)
