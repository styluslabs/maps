# Hillshading and contour lines from DEM (elevation) tiles

# - elevation tile data format: https://github.com/tilezen/joerd/blob/master/docs/formats.md
#  - cannot be used with linear filtering (GL_LINEAR), and GLES doesn't support filtering with f32 (only f16
#   or smaller), so we have to set `filtering: nearest` and do interpolation ourselves
#  - also, Tangram doesn't use GLSL #version statement (although shader block can request extensions), so we
#   have to use texture2D instead of texelFetch (GLSL 1.30+)
#  - see https://github.com/SableRaf/Processing-Experiments/blob/master/2013/Shaders/filtersAndBlendModes/Filters/Bicubic/data/shader.glsl and links therein for some alternative interpolation methods; also https://vec3.ca/bicubic-filtering-in-fewer-taps/

# - Many algorithms for computing hillshading (i.e., normals) from elevation
#  - https://www.usna.edu/Users/oceano/pguth/md_help/html/demb1f3n.htm
#  - Zevenbergen & Thorne: 2nd order central finite diff - vec2(h21 - h01, h12 - h10)/dxy/2 (where h11 is central texel)
#  - Horn: Sobel operator (3rd order finite diff w/ 8 surrounding pixels)

# - slight seams between tiles are sometimes visible - I don't think there is any way to completely eliminate
#  these other than adding a 1 pixel border around each tile with pixels from adjacent tiles (as mapbox-gl does)
#  ... or use precalculated normal tiles for hillshading instead of calculating from elevation
# - mapbox-gl calculates gradient from elevation in 1st pass ("hillshade_prepare") using Horn (Sobel operator)
#  and GL_NEAREST, then in 2nd pass ("hillshade") calculates normal (reading gradients from texture w/
#  GL_LINEAR) and does some fancy adjustments to get final hillshading
# - Carto SDK generates normals from elevation on CPU (also using Horn/Sobel)

import:
    - elevation.yaml


global:
    contour_color: '#C56008'  #vec4(0.773,0.376,0.031,1.)
    base_mix_color: [0.9, 0.9, 0.9, 0.8]
    show_contours: false
    show_hypsometric: true
    enable_contour_vars: false


application:
    gui_variables:
        u_exaggerate:
            style: hillshade
            label: Hillshade Exaggeration
        contour_color:
            enabled: global.enable_contour_vars
            label: Contour Color
            type: color
        u_min_contour_elev:
            enabled: global.enable_contour_vars
            style: hillshade
            label: Min Contour Elevation (m)
            step: 100
            min: -9000
            max: 9000


styles:
    # rasters assigned to a vector tile are limited to vector tile zoom, so to see higher resolution DEM, we
    #  have to blend vector polygons over base hillshading
    translucent-polygons:
        base: polygons
        lighting: false
        blend: translucent
        draw: { alpha: 0.25 }

    # for mixing fixed color into color from raster, e.g., to lighten and desaturate color from worldcover tiles
    mix-base-raster:
        shaders:
            uniforms:
                u_base_mix_color: global.base_mix_color
            blocks:
                color: |
                    base_color.rgb = mix(base_color.rgb, u_base_mix_color.rgb, u_base_mix_color.a);

    hillshade:
        base: raster
        mix: [ global.terrain_3d_mixin, get-elevation ]
        raster: custom
        #texcoords: true
        blend: nonopaque
        # blend_order for translucent lines is -1001 for stylus-osm-dark
        blend_order: -1002
        shaders:
            defines:
                METRIC_UNITS: global.metric_units
                SHOW_CONTOURS: global.show_contours
                SHOW_HYPSOMETRIC: global.show_hypsometric
            uniforms:
                u_exaggerate: 4.5
                u_contour_color: global.contour_color
                u_min_contour_elev: 0.0
                # https://github.com/der-stefan/OpenTopoMap/blob/master/mapnik/relief_color_text_file.txt
                # - stop offset in meters/10000
                u_terrain_color: |
                    data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="51" height="1">
                      <defs>
                        <linearGradient id="grad" x1="0" x2="1.98">
                          <stop offset="0.0000" stop-color="rgb( 17, 120,   3)" />
                          <stop offset="0.0100" stop-color="rgb( 72, 162,  69)" />
                          <stop offset="0.0300" stop-color="rgb(231, 218, 158)" />
                          <stop offset="0.1500" stop-color="rgb(161,  67,   0)" />
                          <stop offset="0.3000" stop-color="rgb(130,  30,  30)" />
                          <stop offset="0.4000" stop-color="rgb(110, 110, 110)" />
                          <stop offset="0.5000" stop-color="rgb(255, 255, 255)" />
                          <stop offset="0.6000" stop-color="rgb(255, 255, 255)" />
                        </linearGradient>
                      </defs>
                      <rect x="0" y="0" width="51" height="1" fill="url(#grad)" />
                    </svg>

            blocks_disabled:
                # for testing
                color: |
                    vec2 uv = currentRasterUV(ELEVATION_INDEX);
                    if(uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0)
                      color = vec4(100.0*(uv.x - 1.0), 100.0*(0.0 - uv.x), 0.0, 1.0);  //discard;
                    else
                      discard;  //color = vec4(uv.x, uv.y, 0.0, 1.0);

            blocks:
                normal: |
                    // Using 9 texel patch, estimate 1st and 2nd deriv to smooth elevation and normal
                    vec2 st = currentRasterUV(ELEVATION_INDEX);
                    vec2 texwh = rasterPixelSize(ELEVATION_INDEX);
                    vec2 duv = 1./texwh;
                    vec2 ij = st * texwh;
                    // this fixes seams on raster tiles, but adds seams in polygons!
                    //if(ij.x < -0.5 || ij.x > texwh.x+0.5 || ij.y < -0.5 || ij.y > texwh.y+0.5)
                    //  discard;
                    vec2 cen_ij = floor(ij) + 0.5;
                    vec2 uv = cen_ij*duv;
                    float h00 = getElevationAt(uv - duv);
                    float h01 = getElevationAt(uv + vec2(-duv.x, 0.));
                    float h02 = getElevationAt(uv + vec2(-duv.x, duv.y));
                    float h10 = getElevationAt(uv + vec2(0., -duv.y));
                    float h11 = getElevationAt(uv);
                    float h12 = getElevationAt(uv + vec2(0., duv.y));
                    float h20 = getElevationAt(uv + vec2(duv.x, -duv.y));
                    float h21 = getElevationAt(uv + vec2(duv.x, 0.));
                    float h22 = getElevationAt(uv + duv);
                    // handle edge of tile by extrapolating
                    bvec2 bot = lessThan(cen_ij, vec2(1.));
                    bvec2 top = greaterThan(cen_ij + 1., texwh);
                    if(bot.x) { h00 = 2.*h10 - h20; h01 = 2.*h11 - h21; h02 = 2.*h12 - h22; }
                    if(top.x) { h20 = 2.*h10 - h00; h21 = 2.*h11 - h01; h22 = 2.*h12 - h02; }
                    if(bot.y) { h00 = 2.*h01 - h02; h10 = 2.*h11 - h12; h20 = 2.*h21 - h22; }
                    if(top.y) { h02 = 2.*h01 - h00; h12 = 2.*h11 - h10; h22 = 2.*h21 - h20; }
                    // proj meters per elevation tile pixel; note u_tile_origin.w is tile data zoom,
                    //  u_tile_origin.z is tile styling zoom, u_map_position.z is view zoom (float)
                    vec2 dxy_elev = 2.*3.141592*6378137.0*exp2(-u_tile_origin.w)*duv/u_raster_offsets[ELEVATION_INDEX].z;
                    // convert projected meters to actual meters - Mercator scale factor is cos(latitude); we recover
                    //  latitude from Mercator y (projected meters): lat = 2*atan(exp(y/R)) - M_PI/2;
                    float unproj = exp(u_map_position.y/6378137.0);
                    float coslat = 2.0/(unproj + 1.0/unproj);
                    // offset from pixel center
                    vec2 f = ij - cen_ij;
                    // 2nd order finite diff - mixed partials needed to (almost) eliminate hillshading pixelation
                    float ddxy = (h22 - h20 - h02 + h00)/4.;
                    mat2 curv = mat2(h21 - 2.*h11 + h01, ddxy, ddxy, h12 - 2.*h11 + h10);
                    // interpolated slope and elevation
                    vec2 grad0 = vec2(h21 - h01, h12 - h10)/2.0;
                    vec2 grad = (grad0 + curv*f)/dxy_elev;
                    float elev = h11 + dot(f, grad0) + 0.5*dot(f, curv*f);  // 2nd order does help a bit w/ contour lines
                    // no underwater terrain for now
                    float hscale = elev > 0. ? u_exaggerate : 0.;  // /pow(u_meters_per_pixel, 0.7)/65536.;
                    normal = normalize(vec3(-hscale*grad/coslat, 1.));
                    // slope from gradient calculated above
                    float slope = length(grad);
                    float slope_degs = atan(slope/coslat)*180.0/3.141592;
                    // setup base color - this could be moved to setup block
                    vec4 contour_color = u_contour_color;
                    #if ELEVATION_INDEX
                    vec4 base_color = sampleRaster(0);
                    #elif defined(TANGRAM_TERRAIN_3D)
                    vec4 base_color = vec4(0.88, 0.88, 0.88, 1.0);
                    #else
                    #define HILLSHADE_BLEND_OVER
                    vec4 shading = calculateLighting(v_position.xyz, normal, vec4(1.0));
                    vec4 base_color = vec4(0.0, 0.0, 0.0, 0.0);  //v_color;
                    contour_color = shading*contour_color;
                    #endif
                color: |
                    #ifdef SHOW_CONTOURS
                    float z = u_map_position.z;
                    //float s = u_tile_origin.z; -- looks better to use same contour interval for entire scene
                    if(z < 10.) {
                    #ifdef SHOW_HYPSOMETRIC
                        // terrain colormap (i.e., map height to color) for low zooms
                        vec4 relief = texture2D(u_terrain_color, vec2(elev/5000., 0.5));
                        if(u_min_contour_elev <= 0.0 || elev >= u_min_contour_elev)
                          base_color = mix(base_color, vec4(relief.rgb, 0.75), 1.0/(1.0 + base_color.a));
                    #endif
                    } else {
                        // contour lines
                        // spacing between contour lines in meters - 10m has too many artifacts
                    #ifdef METRIC_UNITS
                        float interval = z >= 14. ? 25. : z >= 12. ? 50. : 100.;
                        float coarse = z >= 14. ? 100. : z >= 12. ? 200. : 500.;
                    #else
                        float interval = (z >= 14. ? 100. : z >= 12. ? 200. : 500.)/3.28084;
                        float coarse = (z >= 14. ? 500. : z >= 12. ? 1000. : 2000.)/3.28084;
                    #endif
                        float zstep = z >= 14.0 ? 14.0 : z >= 12.0 ? 12.0 : 10.0;
                        // contour line half width in pixels
                        float linehw = mix(0.3, 0.5, clamp(0.5*(z - zstep), 0., 1.));  // 0.5;
                    #ifdef TANGRAM_TERRAIN_3D
                        //linehw *= 0.01/(1.0 - gl_FragCoord.z);  // reduce variation of line width with depth
                        linehw *= 1.25;
                        elev = mix(elev, v_world_position.z, clamp(5.0*abs(elev - v_world_position.z)/interval, 0., 1.));
                        float px_per_elev = 1./fwidth(v_world_position.z);
                    #else
                        float px_per_elev = 1./(slope * u_meters_per_pixel);
                    #endif
                        // no underwater contour lines!
                        float hc = max(elev, u_min_contour_elev + interval/2.);
                        // distance in pixels to nearest contour lines (above and below)
                        float dup = fract(hc/interval)*interval * px_per_elev;
                        float ddn = abs(1. - fract(hc/interval))*interval * px_per_elev;
                        // contour line pixel coverage
                        float cov = max(0.5 - dup + linehw, 0.) + max(0.5 - ddn + linehw, 0.);
                        // coarse lines
                        float coarsehw = 2.*linehw;  //0.75;
                        dup = fract(hc/coarse)*coarse * px_per_elev;
                        ddn = abs(1. - fract(hc/coarse))*coarse * px_per_elev;
                        cov += max(0.5 - dup + coarsehw, 0.) + max(0.5 - ddn + coarsehw, 0.);
                        base_color = mix(base_color, contour_color, min(cov, 1.));
                    }
                    #endif
                    // apply lighting to get final color
                    #ifdef HILLSHADE_BLEND_OVER
                    // for blending over background and opaque polygons; scale by 1/(1-light_accumulator_ambient) instead?
                    color = vec4(4.0*shading.rgb - 3.0, 0.25);
                    color = mix(color, base_color, base_color.a);
                    #else
                    color = calculateLighting(v_position.xyz, normal, base_color);
                    color = vec4(color.rgb, 1.0);
                    #endif
                    // prevent duplicate call to calculateLighting()
                    #undef TANGRAM_LIGHTING_FRAGMENT


lights:
    #point1: { type: point, position: [0, 0, 200px], origin: ground }
    #light1: { type: directional, direction: [1, 1, -.9], diffuse: 0.8, ambient: 0.3 }
    #light1: { type: directional, origin: world, direction: [1, 1, -1], diffuse: 0.3, ambient: 0.7 }
    # single light - use exaggeration ~ 1.5
    # - w/ 'origin: world', lighting changes as camera is rotated
    #light1: { type: directional, origin: world, direction: [1, -1, -1], diffuse: 0.4, ambient: 0.7 }
    # Google Terrain style lighting, where flat areas are brighter than slopes - use exaggeration ~ 4
    light1: { type: directional, direction: [0, 0, -1], diffuse: 0.2, ambient: 0.35 }
    light2: { type: directional, direction: [1, -1, -1], diffuse: 0.2, ambient: 0.35 }


#scene: { background: { color: '#E0E0E0' } }  -- default now set in markers.yaml

layers:
    earth:
        enabled: false  # enabled by update from mapsources.yaml entry (only for vector base map)
        data: { source: elevation }
        draw: { hillshade: { color: global.earth_color, order: global.earth_order } }

    contour-labels:
        data: { source: elevation }
        filter: { $zoom: { min: 12 } }
        enabled: global.show_contours
        draw:
            text:
                style: contour-labels
                #priority: global.priority.contour_label
                # auto forces text to always be oriented uphill, even if upside down on screen
                angle: auto
                # text_source: units will append units (m or ft) to label
                #text_source: units
                repeat_distance: 200px
                font:
                    family: global.primary_font
                    style: italic
                    size: 9.33px
                    fill: global.color.default_label
                    stroke: { color: global.color.default_halo, width: 2 }

    #contour-debug:
    #    data: { source: elevation }
    #    filter: { $zoom: { min: 12 } }
    #    enabled: global.show_contours
    #    draw:
    #        lines:
    #            style: contour-debug
    #            color: red
    #            order: 0
