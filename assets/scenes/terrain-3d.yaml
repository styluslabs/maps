# terrain3d.yaml
import:
    - elevation.yaml


global:
    terrain_3d_mixin: terrain-3d
    terrain_3d_scale: 1.0
    elevation_sources: [elevation]
    fog_color: '#FFFFFF'
    #show_land_polygons: false  -- set in config updates


# need to add support for uniform appearing in multiple shaders
#application:
#    gui_variables:
#        u_fog_density:
#            style: hillshade
#            label: Fog density
#            min: 0
#            max: 100


styles:
    fog:
        shaders:
            uniforms:
                u_fog_color: global.fog_color
                u_fog_density: 0.1
            blocks:
                filter: |
                    #ifdef TANGRAM_TERRAIN_3D
                    // note v_position.z < 0
                    float cospitch = u_view[2][2];
                    float eyeh = -u_view[3][2];  // distance from eye to map center
                    float fog = exp(u_fog_density * v_position.z/eyeh/(cospitch + 0.5));
                    color.rgb = mix(u_fog_color.rgb, color.rgb, clamp(fog, 0.0, 1.0));
                    #endif

    terrain-3d:
        mix: [ get-elevation, fog ]
        # tile_edges == false is the default except for lines
        draw: { tile_edges: false }
        shaders:
            defines:
                TANGRAM_VERTEX_RASTERS: true
                TANGRAM_MIN_ELEVATION: 0.0
                TANGRAM_TERRAIN_SCALE: global.terrain_3d_scale
            blocks:
                position: |
                    #ifdef TANGRAM_TERRAIN_3D
                    // use larger depth delta near camera to prevent terrain from covering geometry
                    depth_shift = -0.02*u_proj[2][3];
                    #ifdef TANGRAM_RASTER_STYLE
                    // need sufficient offset for proxy levels to prevent terrain poking through level above
                    proxy *= 48.0;
                    #endif
                    float scale3d = float(TANGRAM_TERRAIN_SCALE);  // int to float
                    float elev3d = max(getElevation(), TANGRAM_MIN_ELEVATION);
                    position.z += scale3d * elev3d;
                    v_world_position.z += elev3d;
                    #endif
