# adaption of tangram default scene.yaml to Stylus Labs vector tile schema
# - OpenMapTiles schema omits some important information, unnecessarily groups OSM tags, uses too many layers
#  resulting in larger tiles due to duplicated data, etc.; Shortbread schema has even more layers
# - don't seem to be many services using mapzen schema (except HERE)
# - mapzen walkabout style is nice, but way too big - nearly 10K lines
# - no one uses mapbox schema except mapbox?
# - trying to create scene file that works for multiple schema isn't practical (either w/ globals or stacking yaml files)

global:
    #camera_settings: { type: isometric, axis: [-.2, .2] }
    camera_settings: { type: perspective }
    # globals required for hillshading
    earth_style: polygons
    earth_color: '#E0E0E0'  #[.97, .955, .94] #'#f0ebeb'
    earth_order: 599  # should be above all other polygons
    #elevation_sources: []
    marker_font: Open Sans
    # Open Sans looks very good, especially the italic style
    primary_font: Open Sans
    bold_weight: 600  # use instead of "bold" to avoid checking for OS font if we only have semibold

    # HSL: 0 (== 360) is red, 120 is green, 240 is blue
    color:
        #background: [.97, .955, .94] #'#f0ebeb'
        #earth: white
        default_label: black
        default_halo: white
        landuse: honeydew
        parks: hsl(135, 33%, 81%)  #'#bddec5'
        parks_border: hsl(135, 63%, 41%)
        forest: hsl(135, 33%, 75%)  # darker
        scrub: hsl(135, 33%, 87%)  # lighter
        farmland: hsl(105, 33%, 81%)  # decr hue -> more yellow
        grass: hsl(120, 33%, 75%)
        wetland: hsl(150, 33%, 81%)  # incr hue -> more blue
        park_detail: hsl(134.5, 21%, 72%)
        golf: hsl(124, 83%, 88%)  #'#C8FACC'
        industry: '#C0CDCD'
        retail: '#FEF0D0'
        civic: '#D9CFC3'
        water: '#9dc3de'  # == hsl(205, 50%, 74%) (compare ferry color)
        water_name: "#51909c"
        water_halo: "#e2eef0"
        spring: hsl(210, 100%, 45%)
        beach: '#FEEFC3'  #[1.000,0.953,0.900]
        ice: white
        rock: '#F5F0E5'
        road: '#fff'
        casing_16: '#999'
        casing_18: '#aaa'
        tunnel: '#E3E3E3'
        tunnel_casing: '#A0A0A0'
        oneway_arrow: '#888'
        motorway: '#FDE293'
        motorway_tunnel: '#CDB775'
        motorway_link: '#FDE293'  #'#aaa'
        motorway_muted: '#eee'
        path: '#fff'
        unpaved_trail: '#B06000'
        bike_lane: '#008800'
        bike_path: '#004C00'
        bike_unpaved: '#306000'
        transit: '#EB322F'
        rail: '#96ABB2'  #[0.588,0.671,0.698]
        rail_tunnel: '#A9C3CB'
        dashed_rail_core: '#E6E9EC'  #white
        dashed_rail: '#919BA4'  #'#555555'
        service_rail: '#B1BBC4'  #'#999999'
        dashed_rail_tunnel: '#A1ABB4'  #'#777777'
        pier: '#F2EFE9'  #[0.993,0.993,0.993]
        breakwater: '#AAAAAA'
        ferry: hsl(205, 42%, 62%)  #'#8db3ce'
        runway_13: '#C7CADC'  #'#FFE4B5'
        taxiway: '#BCBCCC'
        airport: '#E8EAEF'  #'#ddd'
        airport_name: '#487585'
        shield: '#FFFFFF'
        motorway_shield: '#FFDC36'
        road_name: '#666'
        road_halo: white
        ferry_name: hsl(205, 42%, 62%)  #'#8db3ce'
        ferry_halo: white
        border: '#888'  #wheat
        border_country: '#666'  #[0.824, 0.651, 0.329, 1.00]
        city_point: white
        city_point_halo: black
        place_name: rgba(0, 0, 0, 0.8)
        place_halo: white
        hood_name: rgba(136, 45, 23, 0.9)
        hood_halo: white
        bldg: [.83, .83, .83, 0.75]
        bldg_3d: [.83, .83, .83, 0.5]
        bldg_3d_line: [.65, .65, .63, 0.5]
        park_name: darkgreen
        park_halo: white
        housenumber: [0.30,0.30,0.30]  #"#d2b17d"
        housenumber_halo: [0.913,0.925,0.933]  #rgba(38,38,38,0.15)
        aerialway: '#555'
        aerialway_name: black
        aerialway_halo: white
        piste_name: black
        piste_halo: white
        piste:
            novice: '#2FB439'  #[0.367,0.750,0.622]
            easy: '#2F76B4'  #[0.367,0.750,0.622]
            intermediate: '#F54141'  #[0.420,0.678,0.863]
            advanced: '#2E2E2E'  #[0.450,0.450,0.450]
            expert: '#2E2E2E'  #[0.450,0.450,0.450]
            freeride: '#FFA500'
        mtb:
            "0": '#2FB439'
            "1": '#2F76B4'
            "2": '#F54141'
            "3": '#2E2E2E'
            "4": '#2E2E2E'
            "5": '#FFA500'
        #urban_7: lightgrey
        #urban_9: [.88, .88, .88]
        #motorway_5: '#F89595'
        #motorway_7: '#D16768'
        #runway_16: '#fff'
        #runway_casing: orange

    # z-order for polygons (<100) and lines (higher z-order draws over lower); order > 1000 is reserved by mapsapp
    # ... now offset by 500 because we need depth range for raster tile proxy levels
    order:
        landuse: 510
        parks: 512
        park_detail: 514
        golf: 516
        airport: 518
        landcover: 520
        waterway: 622
        water: 624
        pier: 626
        bldg: 630
        transportation_casing: 638
        transportation: 640
        rail_sleepers: 640
        rail: 645
        taxiway: 650
        path: 650
        runway: 655
        minor_road: 660
        piste: 665
        major_road: 670
        motorway: 680
        bridge: 700
        bicycle: 720
        transit: 750
        # put bus routes on top so they aren't hidden by wider route train/subway/tram routes
        transit_routes: { subway: 1, train: 2, light_rail: 3, tram: 4, bus: 5, trolleybus: 5 }
        aerialway: 760
        border_inner: 790
        border: 791
        bldg_3d_line: 799
        bldg_3d: 800

    piste_color_fn: function() { return global.color.piste[feature.difficulty] || 'white'; }
    piste_symbols: { easy: '●', intermediate: '■', advanced: '◆', expert: '◆◆' }
    piste_name_fn: |
        function() {
            const sym = global.piste_symbols[feature.difficulty] || '';
            return feature.name ? (sym + ' ' + feature.name) : sym;
        }

    mtb_color_fn: function() { return global.color.mtb[feature.mtb_scale] || global.color.bike_unpaved; }

    transit_order_fn: |
        function() {
            const offset = global.order.transit_routes[feature.route] || 0;
            return global.order.transit + offset + (Number(feature.osm_id) & 65535)/65536;
        }

    transit_color_fn: |
        function() {
            const c = feature.color;
            return (!c || c == "white" || c == "#ffffff" || c == "#FFFFFF") ? global.color.transit : c;
        }

    show_name_en: true
    names_one_line: ['name_en', 'name']
    names_one_line_fn: |
        function() { return global.show_name_en && feature.name_en ? feature.name_en : feature.name; }
    names_two_lines: |
        function() { return global.show_name_en && feature.name_en && feature.name ? feature.name_en + "\n" + feature.name : feature.name; }

    shuffle_seed: 58987
    # priorities for colliding objects (points and text; lower value wins) - fractional part now orders within
    #  group defined by integer part, after ordering by visible state and camera space z coord
    priority:
        continent: 6
        district_CN: 9
        neighborhood: 10
        peak: 14
        saddle: 15
        cave: 16
        spring: 17
        boundary: 19  # boundaries often follow mountain ridges, so don't let them hide peaks or saddles
        park: 20
        golf: 21
        cemetery: 22
        forest: 23
        # road labels
        oneway_arrow: 23
        motorway_ref: 24
        highway_ref: 25
        road_primary: 30
        road_secondary: 40
        motorway_name: 45  # shield generally more important than name for motorway
        road_tertiary: 50
        road_minor: 60
        # transit line labels
        transit_ref: 19
        transit_ref_tram: 24
        transit_ref_bus: 29
        # transit stops
        bus_stop: 20  # bus stops only shown when show_transit = true
        station_transit: 5 # transit station priority when show_transit = true
        station_default: 29  # transit station priority when show_transit = false
        #station_tram: 6  # only shown when show_transit = true
        # we want to show every traffic light if showing any
        traffic_light: 4
        # housenumbers only shown at high zoom and unlikely to collide
        housenumber: 350
        # POIs - use osm_id to provide well-defined ordering so POIs don't get replaced by nearby ones when zooming in
        # - looks like it's faster to let Tangram convert string to number instead of using Number() in JS fn
        poi_default:     function() { return 101 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_viewpoint:   31  #function() { return  31 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_toilet:      32  #function() { return  32 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_university:  33  #function() { return  33 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_grocery:     function() { return  34 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_culture:     function() { return  41 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_restaurant:  function() { return  43 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_cafe:        function() { return  44 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_convenience: function() { return  51 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_school:      function() { return  52 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_religion:    function() { return 101 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        poi_parking:     function() { return 102 + ((global.shuffle_seed ^ Number(feature.osm_id)) & 65535)/65536; }
        # cities, states, countries
        place: { country: 7, state: 8, province: 8, city: 9, town: 10, village: 11, suburb: 12, hamlet: 13 }
        place_fn: |
            function() {
                return (global.priority.place[feature.place] || 14) - Math.round(Math.sqrt(feature.population || 1))/65536;
                //return (global.priority.place[feature.place] || 14) + 100.0/(100 + (feature.population || 1));
            }

    # bounds for country-specific filters
    japan_bounds:  # covers main islands, does not include Okinawa, etc
        - { $latitude: {min: 31, max: 41.8}, $longitude: {min: 129.6, max: 142.3} }
        - { $latitude: {min: 41.1, max: 45.8}, $longitude: {min: 139.2, max: 146.3} }

    # if we want to easily add on top of various raster sources, have MapsSources set global._vector_order to
    #  layer number for vector source
    show_polygons: true  # function() { return !(global._vector_order > 0); }
    show_bike: false
    show_transit: false
    show_trails: false
    show_parking: false
    show_motorways: true
    show_land_polygons: global.show_polygons


application:
    gui_variables:
        show_polygons: { label: Polygons }
        show_bike: { label: Bike }
        show_trails: { label: Hike }
        show_transit: { label: Transit }
        show_parking: { label: Parking }
        show_motorways: { label: Motorways }

    # specify fields indexed for search and filter to select indexed features
    search_data:
        - layer: poi
          fields: [name, name_en, amenity, leisure, shop, sport, tourism, cuisine]
          filter:
              - name: true
                not:
                    - highway: [bus_stop]
              - amenity: [drinking_water, toilets]
        - layer: place
          fields: [name, name_en]
          filter: { name: true }


sources:
    osm:
        type: MVT
        cache: stylus-osm
        attribution: |
            © OpenStreetMap contributors
        max_zoom: 14
        rasters: global.elevation_sources


fonts:
    Open Sans:
        - weight: 400
          url: ../shared/fonts/OpenSans-Regular.ttf
        - weight: 400
          style: italic
          url: ../shared/fonts/OpenSans-Italic.ttf
        - weight: 600
          url: ../shared/fonts/OpenSans-SemiBold.ttf


scene:
    background:
        color: global.earth_color  #global.color.background


cameras:
    camera1: global.camera_settings


#lights:
#    light1: { type: directional, origin: world, direction: [1, 1, -1], diffuse: 0.5, ambient: 0.7 }
#    #light2: { type: directional, origin: world, direction: [1, 1, -1], diffuse: [.3, .3, .3, 1.], ambient: [0.7, 0.7, 0.7, 1.] }


#textures:


styles:
    # blend_order -1000 to draw buildings just above other geometry; blend_order -110 to -100 reserved by app
    heightglow:
        base: polygons
        mix: global.terrain_3d_mixin
        blend: translucent
        blend_order: -1000
        lighting: vertex
        shaders:
            blocks:
                # worldPosition() will include elevation if 3D enabled, but we only want building height
                color: |
                    #ifdef TANGRAM_MODEL_POSITION_BASE_ZOOM_VARYING
                    color.rgb += vec3(v_modelpos_base_zoom.z * u_model[2][2] / 800.);
                    #else
                    color.rgb += vec3(worldPosition().z / 800.);
                    #endif

    heightglowline:
        base: lines
        blend_order: -999
        mix: heightglow

    unlit-lines:
        base: lines
        mix: global.terrain_3d_mixin
        lighting: false

    # water polygons can be assumed to be flat (not quite true for rivers), so only need to set elevation at edges
    unlit-polygons:
        base: polygons
        mix: global.terrain_3d_mixin
        lighting: false

    ocean-polygons:
        base: polygons
        lighting: false
        # need to match depth_shift in raster style or ocean will be placed under terrain
        shaders:
            blocks:
                position: |
                    #ifdef TANGRAM_TERRAIN_3D
                    depth_shift = -0.02*u_proj[2][3];
                    #endif

    # dash only supported for styles, not draw block because each dash pattern requires separate shader
    dashed-border: { mix: unlit-lines, dash: [2.0, 0.5] }
    dashed-path:   { mix: unlit-lines, dash: [3.0, 0.5] }
    dashed-track:  { mix: unlit-lines, dash: [2.5, 1.0] }
    dashed-steps:  { mix: unlit-lines, dash: [0.5, 0.5] }
    dashed-bike:   { mix: unlit-lines, dash: [1.0, 1.0] }
    dashed-rail:   { mix: unlit-lines, dash: [4.0, 4.0] }
    #rail-sleepers: { mix: unlit-lines, dash: [0.15, 7.0] }

    aerialway:
        mix: unlit-lines
        # both approaches have issue w/ circles being stretched due to change of line width w/ zoom
        #blend: nonopaque; texcoords: true; shaders: defines: { dotSize: 0.2 }; blocks.color: |
        #  vec2 st = vec2(v_texcoord.x, 4.0*fract(v_texcoord.y / 4.0)) - 0.5;
        #  color.a = 1. - step(dotSize, dot(st,st)*2.);
        texture: |
            data:image/svg+xml;utf8,<svg width="10pt" height="40pt" viewBox="-5 -20 10 40">
              <g fill="#fff"> <circle cx="0" cy="0" r="4"/> </g>
            </svg>

    piste-direction:
        mix: unlit-lines
        texture: |
            data:image/svg+xml;utf8,<svg width="10pt" height="80pt" viewBox="-5 -40 10 80">
              <g fill="#fff"> <path d="M-5 -40 L-5 0 L0 -4 L5 0 L5 -40Z M-5 40 L-5 6 L0 2 L5 6 L5 40Z"/> </g>
            </svg>

    inner-lines:
        mix: unlit-lines
        blend: nonopaque
        texcoords: true
        shaders:
            blocks:
                color: |
                    if (v_texcoord.x < 0.5) { discard; }


layers:
    landcover:
        data: { source: osm, layer: landuse }
        enabled: global.show_land_polygons
        #filter: [ { $zoom: { min: 16 } }, { area: { min: 500px2 } } ]
        draw:
            polygons:
                visible: false
                style: global.earth_style
                order: global.order.landcover
                color: global.color.landuse
        forest:
            filter: [ { class: forest }, { landuse: forest }, { natural: wood } ]
            draw: { polygons: { visible: true, color: global.color.forest } }
        scrub:
            filter: { natural: [scrub, fell, heath] }
            draw: { polygons: { visible: true, color: global.color.scrub } }
        grass:
            filter:
                - class: grass
                - landuse: [grass, allotments, meadow]
                - natural: [grassland, grass]
            draw: { polygons: { visible: true, color: global.color.grass } }
        wetland:
            filter: [ { class: wetland }, { natural: wetland } ]
            draw: { polygons: { visible: true, color: global.color.wetland } }
        beach:
            filter: [ { class: sand }, { natural: [beach, sand] } ]
            draw: { polygons: { visible: true, color: global.color.beach } }
        ice:
            filter: [ { class: ice }, { natural: glacier } ]
            draw: { polygons: { visible: true, color: global.color.ice } }
        rock:
            filter: [ { class: rock }, { natural: [bare_rock, scree] } ]
            draw: { polygons: { visible: true, color: global.color.rock } }
        farmland:
            filter:
                - class: farmland
                - landuse: [farmland, farmyard, farm, orchard, vineyard, plant_nursery, greenhouse_horticulture]
            draw: { polygons: { visible: true, color: global.color.farmland } }
        # golf course can be inside park, so make sure it is drawn on top
        golf:
            filter: [ { class: golf_course }, { leisure: [golf_course, pitch] } ]
            draw: { polygons: { visible: true, order: global.order.golf, color: global.color.golf } }
        park:
            filter:
                - class: park
                - landuse: [recreation_ground, village_green]
                - leisure: [park, garden]
            draw: { polygons: { visible: true, order: global.order.parks, color: global.color.parks } }

    landuse:
        data: { source: osm, layer: landuse }
        enabled: global.show_land_polygons
        #filter: [ { $zoom: { min: 16 } }, { area: { min: 500px2 } } ]
        draw:
            polygons:
                visible: false
                style: global.earth_style
                order: global.order.landuse
                color: global.color.landuse
        green:
            filter: { class: [zoo, playground, pitch, cemetery] }
            draw: { polygons: { visible: true, order: global.order.park_detail, color: global.color.park_detail } }
        retail:
            filter: { landuse: [retail] }  #industrial, commercial
            draw: { polygons: { visible: true, color: global.color.retail } }
        civic:
            filter: { amenity: [university, college] }  # class: school
            draw: { polygons: { visible: true, color: global.color.civic } }
        #urban:
        #    filter: { kind: urban_area }
        #    draw: { polygons: { color: [[7, global.color.urban_7], [9, global.color.urban_9]] } }

    park:
        data: { source: osm, layer: landuse }
        enabled: global.show_polygons
        filter:
            - { boundary: national_park, $zoom: { min: 8 } }
            - { boundary: protected_area, protect_class: [1, 1a, 1b, 2, 3], $zoom: { min: 10 } }
            - { leisure: nature_reserve, protect_class: [1, 1a, 1b, 2, 3], $zoom: { min: 10 } }
            #any: [ { $zoom: { min: 16 } }, { area: { min: 500px2 } } ]
        default:
            filter:
                name: true
                any: [ global.show_land_polygons, { $zoom: { max: 11 } } ]  # more succinct than all: [ {any: []}, {any: []} ]
            draw:
                lines:
                    style: unlit-lines
                    order: global.order.border
                    color: global.color.parks_border
                    width: 1px
                inner-lines:
                    style: inner-lines
                    order: global.order.border_inner
                    color: global.color.parks
                    alpha: 0.5
                    width: 8px

    pier:
        data: { source: osm, layer: landuse }
        enabled: global.show_polygons
        filter: { man_made: [pier, breakwater, groyne] }
        pier_areas:
            filter: { $geometry: polygon }  #$zoom: { min: 13 }
            draw:
                polygons:
                    style: unlit-polygons
                    order: global.order.pier
                    color: global.color.breakwater
            pier:
                filter: { man_made: pier }
                draw: { polygons: { color: global.color.pier } }
        pier_lines:
            filter: { $geometry: line }
            pier: { filter: { man_made: pier }, draw: { lines: { color: global.color.pier } } }
            draw:
                lines:
                    style: unlit-lines
                    order: global.order.pier
                    color: global.color.breakwater
                    width: [[13, 0px], [14, 0.5px],[15, 1.5px], [16, 2.5px],[17, 3px],[18, 3m]]

    water:
        data: { source: osm, layer: water }
        enabled: global.show_polygons
        filter: { $geometry: polygon }
        draw:
            polygons:
                style: unlit-polygons
                order: global.order.water
                color: global.color.water
        ocean:
            filter: { class: ocean }
            # ensure that ocean has elevation = 0 (by not writing elevation)
            draw: { polygons: { style: ocean-polygons } }
        #inter:
        #    filter: { class: [lake, river] }

    water_name:
        data: { source: osm, layer: water }
        filter:
            name: true
            $geometry: [polygon, point]
            any:
                - { $zoom: { min: 17 } }
                - { area: { min: 500px2 } }
                - all: [ { rank: true }, 'function() { return $zoom - feature.rank > 4; }' ]
        draw:
            text:
                #interactive: true
                text_source: global.names_two_lines
                transition: { show: { time: 0s }, hide: { time: 1s } }
                repeat_distance: 500px
                font:
                    family: global.primary_font
                    fill: global.color.water_name
                    stroke: { color: global.color.water_halo, width: 2 }
                    style: italic
                    size: [[16, 12px], [17, 14px]]
        oceans:
            filter: { class: ocean, $zoom: { min: 1, max: 8 } }
            draw: { text: { font: { size: 14px } } }
        #seas:
        #    filter: { class: [lake, sea], $zoom: { min: 7 } }
        #    draw: { text: { font: { size: [[9, 9px], [17, 10px], [18, 12px]] } } }

    waterway:
        data: { source: osm, layer: water }
        enabled: global.show_polygons
        filter: { $geometry: line }
        draw:
            lines:
                style: unlit-lines
                order: global.order.waterway
                color: global.color.water
                width: [[10,0px],[11,1px],[15,2px]]
        unnamed:
            # very large number of unnamed streams in, e.g., Italy (many that should be tagged intermittent?)
            filter: { name: false }
            draw: { lines: { width: [[12,0px],[12,0.5px],[14,1px],[16,2px]] } }
        river:
            filter: { waterway: river }
            draw: { lines: { width: [[7,0.5px],[8,1px],[12,2px],[15,4px]] } }
        intermittent:
            filter: { intermittent: true }
            draw: { lines: { style: dashed-bike } }
            stream:
                filter: { waterway: stream }
                draw: { lines: { width: [[15,0px],[15,0.5px],[16,1.5px],[19,2px]] } }

    waterway_name:
        data: { source: osm, layer: water }
        filter:
            name: true
            #waterway: true
            $geometry: line
            any: [ { $zoom: { min: 17 } }, { waterway: river } ]
        draw:
            text:
                text_source: global.names_one_line
                #buffer: 3px
                font:
                    family: global.primary_font
                    fill: global.color.water_name
                    stroke: { color: global.color.water_halo, width: 2 }
                    style: italic
                    size: [[11, 0px], [12, 10px], [14, 11px], [16, 12px], [17, 14px]]

    transportation:
        data: { source: osm, layer: transportation }
        filter: { not: { class: [transit, route, aeroway] } }
        draw:
            lines:
                style: unlit-lines
                color: global.color.road
                width: 0
                order: global.order.transportation
                outline:
                    visible: global.show_polygons
                    color: [[16, global.color.casing_16], [18, global.color.casing_18]]
                    width: 0  #[[15, 0], [16, 2]]
                    order: global.order.transportation_casing # put all outlines below all roads
        rounded:
            filter: { $zoom: { min: 18 } }
            draw: { lines: { cap: round } }
        bridge:
            filter: { brunnel: bridge }
            priority: 1
            draw: { lines: { order: global.order.bridge } }
        tunnel:
            filter: { brunnel: tunnel, $zoom: { min: 12 } }
            priority: 1
            draw: { lines: { color: global.color.tunnel, outline: { color: global.color.tunnel_casing } } }
        motorway:
            filter: { highway: [motorway, motorway_link] }
            draw:
                lines:
                    order: global.order.motorway
                    color: 'function() { return global.show_motorways ? global.color.motorway : global.color.motorway_muted; }'
                    #[[5, global.color.motorway_5], [7, global.color.motorway_7]]
                    width: [[4, 0], [5, 1px], [8, 1.5px], [14, 2px], [15, 12]]
                    outline:
                        width: [[14, 0], [15, 2]]
            tunnel:
                filter: { brunnel: tunnel, $zoom: { min: 12 } }
                priority: 1
                draw: { lines: { color: global.color.motorway_tunnel } }
            link:
                filter: { highway: motorway_link }
                draw:
                    lines:
                        #color: global.color.motorway_link
                        width: [[13, 0], [14, 12]]
        trunk:
            filter: { highway: [trunk, trunk_link], $zoom: { min: 8 } }
            draw:
                lines:
                    order: global.order.major_road
                    width: [[8, 1px], [13, 2px], [14, 2px], [16, 12]]
                    outline:
                        width: [[16, 0], [17, 1]]
        major_road:
            filter: { highway: [primary, primary_link, secondary, secondary_link] }
            draw:
                lines:
                    order: global.order.major_road
                    width: [[10, 0], [13, 2px], [14, 2px], [16, 12]]
                    outline:
                        width: [[16, 0], [17, 1]]
            withref:
                filter: { ref: true }
                draw: { lines: { width: [[8, 0], [9, 1px], [13, 2px], [14, 2px], [16, 12]] } }

        minor_road:
            filter:
                highway: [tertiary, tertiary_link, unclassified, residential, road, living_street, service]
                $zoom: { min: 13 }
            draw:
                lines:
                    order: global.order.minor_road
                    width: [[13, 0.75px], [14, 1px], [15, 8]]
                    outline:
                        width: [[17, 0], [18, 1]]
            service:
                filter: { highway: service }
                draw: { lines: { width: [[15, 0px], [15, 0.75px], [16, 4px], [17, 8]] } }
            parking:
                filter: { service: parking_aisle }
                draw: { lines: { width: [[15, 0px], [15, 0.75px], [16, 2px], [17, 4]] } }

        paths:
            filter: { highway: [footway, path, steps, pedestrian] }
            draw:
                lines:
                    order: global.order.path
                    style: dashed-path
                    color: global.color.path
                    width: [[14, 0px], [14, 0.5px], [15, 1px], [18, 3px]]
            steps:
                filter: { highway: steps }
                draw: { lines: { style: dashed-steps, width: [[14, 0px], [14, 0.5px], [15, 3px], [18, 6px]] } }
            unpaved:
                enabled: global.show_trails
                filter:
                    - highway: false  # for old schema
                    - highway: path
                    - { highway: footway, surface: unpaved }
                draw: { lines: { color: global.color.unpaved_trail, width: [[10, 1px], [18, 3px]] } }
            poor:
                filter: { trail_visibility: [ bad, very_bad, horrible, no, none, poor ] }
                draw: { lines: { style: dashed-bike } }

        tracks:
            filter:
                highway: [cycleway, byway, bridleway, track]
                $zoom: { min: 13 }
            draw:
                lines:
                    order: global.order.path
                    style: dashed-track
                    color: global.color.path
                    width: [[13, 0.75px], [14, 1px], [15, 2px], [18, 4px]]

        rail:
            filter:
                class: rail
                railway: [rail, narrow_gauge]
                #$zoom: { min: 10 }
            draw:
                lines:
                    style: dashed-rail
                    order: global.order.rail
                    color: global.color.dashed_rail_core
                    width: [[12, 1px], [14, 1px], [16, 2px]]
                    outline:
                        # outline drawn w/o dashed style provides background for dashes!
                        visible: true
                        style: unlit-lines
                        color: global.color.dashed_rail
                        width: [[12, 0.5px], [14, 1px]]
            service:
                filter: { service: true }
                draw:
                    lines:
                        width: [[15, 0px], [15, 0.75px], [16, 1px], [17, 2px]]
                        outline: { color: global.color.service_rail }
            tunnel:
                filter: { brunnel: tunnel }
                draw: { lines: { outline: { color: global.color.dashed_rail_tunnel } } }

        light_rail:
            filter:
                class: rail
                railway: [light_rail, subway, tram, funicular]
                $zoom: { min: 10 }
            draw:
                lines:
                    order: global.order.rail
                    color: global.color.rail
                    width: [[12, 1px], [14, 1px], [16, 2px]]
            service:
                filter: { service: true }
                draw: { lines: { width: [[15, 0px], [15, 0.75px], [16, 1px], [17, 2px]] } }
            #sleepers:
            #    # since dash pattern resets for every line segment it looks very irregular when zoomed out
            #    filter: { $zoom: { min: 14 } }
            #    draw:
            #        rail-sleepers:
            #            order: global.order.rail_sleepers
            #            color: global.color.rail
            #            width: [[12, 4px], [14, 4px], [16, 6px]]
            tunnel:
                filter: { brunnel: tunnel }
                draw: { lines: { color: global.color.rail_tunnel } }

        ferry:
            filter: [ { class: ferry }, { route: ferry } ]
            draw:
                lines:
                    style: dashed-track
                    color: global.color.ferry
                    width: [[14, 1px], [18, 2px]]

        aerialway:
            filter: { class: aerialway, $zoom: { min: 10 } }
            draw:
                lines:
                    order: global.order.aerialway  # aerialway would more often be over bridge vs under
                    color: global.color.aerialway
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
                points:
                    visible: false
                    style: aerialway
                    order: global.order.aerialway
                    color: global.color.aerialway
                    width: [[14, 50], [16, 25], [18, 10], [20, 4]]
                    #width: [[14, 6px], [15, 8px], [16, 10px]]
                    #width: [[14, 50m], [15, 30m], [16, 20m]]
                # maybe use dashed line instead?
                #points:
                #    visible: false
                #    color: global.color.aerialway
                #    size: [[14, 1.25px], [15, 3px], [16, 3px]]
                #    collide: false
                #    placement: spaced
                #    placement_spacing: 10px
                #    placement_min_length_ratio: 0
            show_points:
                filter: { $zoom: { min: 13 }, aerialway: [gondola, cable_car, mixed_lift, chair_lift] }
                draw: { points: { visible: true } }
            gondola:
                filter: { aerialway: [gondola, cable_car, mixed_lift] }
                draw:
                    lines: { width: [[10,0.5px], [11,1px], [12, 1.5px], [13, 1.5px], [14, 2px], [15, 2.5px]] }
                    #points: { size: [[12, 4px], [13, 4px], [14, 5px], [15, 7px], [16, 7px]] }
            chair_lift:
                filter: { aerialway: chair_lift }
                draw:
                    lines: { width: [[10,0.5px], [11,1px], [12, 1.5px], [13, 1.5px], [14, 2px], [15, 2.5px]] }
                    #points: { size: [[12, 4px], [13, 4px], [14, 5px], [15, 7px], [16, 7px]] }
            aerialway_label:
                filter: { $zoom: { min: 14 } }
                draw:
                    text:
                        text_source: name
                        font:
                            family: global.primary_font
                            fill: global.color.aerialway_name
                            stroke: { color: global.color.aerialway_halo, width: 3 }
                            size: 12px

        piste:
            enabled: global.show_trails
            filter: { class: piste, $zoom: { min: 10 } }
            piste_areas:
                filter: { $geometry: polygon, $zoom: { min: 13 } }
                enabled: global.show_land_polygons
                draw:
                    polygons:
                        #visible: global.show_trails
                        style: global.earth_style
                        order: global.order.landuse
                        color: global.piste_color_fn
            piste_lines:
                filter: { $geometry: line }
                draw:
                    lines:
                        #visible: global.show_trails
                        order: global.order.piste
                        color: global.piste_color_fn
                        width: [[10,0.5px],[11,1px],[12,1.25px],[13,2px],[18,3m]]
                        outline:
                            style: unlit-lines
                            color: global.color.piste_halo
                            width: [[13, 0px], [14, 2px]]
                default:
                    filter: { $zoom: { min: 12 } }
                    draw: { lines: { visible: true } }
                direction:
                    filter: { $zoom: { min: 16 } }
                    draw: { lines: { style: piste-direction } }
            piste_names:
                #enabled: global.show_trails
                filter: { $geometry: line, $zoom: { min: 13 } }
                draw:
                    text:
                        text_source: global.piste_name_fn
                        font:
                            family: global.primary_font
                            fill: global.piste_color_fn
                            stroke: { color: global.color.piste_halo, width: 3 }
                            size: 12px

        road-icons:
            arrows:
                # oneway arrows and shields are distinct groups!
                #exclusive: true
                filter: { oneway: 1, $zoom: { min: 17 } }
                draw:
                    points:
                        #collide: false
                        priority: global.priority.oneway_arrow
                        style: poi-points
                        texture: pois
                        sprite: arrow
                        color: global.color.oneway_arrow
                        flat: true
                        size: [[17, 18px], [18, 20px], [20, 32px]]
                        placement: spaced
                        placement_min_length_ratio: 0.5
                        placement_spacing: [[17, 70px], [20, 175px]]
                        angle: auto

    shields:
        enabled: global.show_motorways
        data: { source: osm, layer: transportation }
        filter:
            #function() { const s = feature.maxspeed.split(" "); return parseInt(s[0]) >= (s[1] == "mph" ? 50 : 80); }
            ref: true
            aeroway: false
            route: false
            #not: { class: [transit, route, aeroway] }
            any:
                - { highway: motorway, $zoom: { min: 6 } }
                - { highway: [trunk, primary], $zoom: { min: 9 } }
                - { highway: [secondary, tertiary], $zoom: { min: 13 } }
                - $zoom: { min: 14 }
        motorway:
            filter: { highway: motorway }
            draw: { points: { priority: global.priority.motorway_ref, color: global.color.motorway_shield } }
        draw:
            points:
                visible: function() { return feature.ref.split(";")[0].length <= 8; }
                style: poi-points
                texture: pois
                sprite: shield  #function() { return feature.network; }
                color: global.color.shield
                #sprite_default: shield
                priority: global.priority.highway_ref
                # faster roads get higher priority
                #priority: function() { return global.priority.motorway_ref - parseInt(feature.maxspeed)/200; }
                size: |
                    function() {
                        const str = feature.ref.split(";")[0];
                        var w = 0;
                        // exact values will depend on font
                        for (var ii = 0; ii < str.length; ii++) { w += (str[ii] == " ") ? 3.5 : 7.5; }
                        return [w, 14];
                    }
                # midpoint generates too many labels (overwhelming label collider)
                placement: spaced
                placement_spacing: 30px
                placement_min_length_ratio: 0
                repeat_distance: 150px
                repeat_group: shields
                text:
                    anchor: center
                    text_source: function() { return feature.ref.split(";")[0]; }
                    font:
                        family: global.primary_font
                        size: 10px
                        fill: black

    transportation_name:
        data: { source: osm, layer: transportation }
        filter:
            name: true
            not: { class: [rail, aeroway, route, piste, aerialway] }
            aeroway: false
        draw:
            text:
                #interactive: true
                text_source: |
                    function() {
                       const name = global.names_one_line_fn();
                       return name.replace(" Avenue", " Ave.").replace(" Street", " St.").replace(" Boulevard", " Blvd.").replace(" Drive", " Dr.").replace(" Lane", " Ln.").replace(" Road", " Rd.");
                    }
                transition: { show: { time: 0s }, hide: { time: 1s } }
                font:
                    family: global.primary_font
                    fill: global.color.road_name
                    stroke: { color: global.color.road_halo, width: 2 }
                    # 0px to hide by default
                    size: 0px

        motorway:
            exclusive: true
            filter: { highway: motorway, $zoom: { min: 13 } }
            draw:
                text:
                    visible: global.show_motorways
                    repeat_distance: 200px
                    repeat_group: road_labels
                    priority: global.priority.motorway_name
                    font:
                        # shield is generally more important than name for motorway
                        size: 12px
                        stroke: { width: 4 }

        primary:
            exclusive: true
            filter:
                any:
                    - {highway: trunk, $zoom: { min: 13 }}
                    - {highway: primary, $zoom: { min: 14 }}
            draw:
                text:
                    repeat_distance: 100px
                    repeat_group: roads
                    priority: global.priority.road_primary
                    font:
                        size: 14px
                        stroke: { width: 4 }

        secondary:
            exclusive: true
            filter: { highway: secondary, $zoom: { min: 14 } }
            draw:
                text:
                    repeat_distance: 100px
                    repeat_group: roads
                    priority: global.priority.road_secondary
                    font:
                        size: 14px
                        stroke: { width: 4 }

        tertiary:
            exclusive: true
            filter: { highway: tertiary, $zoom: { min: 15 } }
            draw:
                text:
                    priority: global.priority.road_tertiary
                    font:
                        size: 12px
                        stroke: { width: 4 }

        minor:
            exclusive: true
            filter: { highway: [unclassified, residential, road, living_street, service], $zoom: { min: 16 } }
            draw:
                text:
                    priority: global.priority.road_minor
                    font:
                        size: 10px
                        stroke: { width: 4 }

        paths:
            exclusive: true
            filter: { highway: [footway, path, steps, pedestrian], $zoom: { min: 15 } }
            draw:
                text:
                    priority: global.priority.road_minor
                    font:
                        size: 10px
                        stroke: { width: 4 }

        tracks:
            exclusive: true
            filter: { highway: [cycleway, byway, bridleway, track], $zoom: { min: 15 } }
            draw:
                text:
                    priority: global.priority.road_minor
                    font:
                        size: 10px
                        stroke: { width: 4 }

        ferry:
            exclusive: true
            filter: [ { class: ferry }, { route: ferry } ]
            draw:
                text:
                    text_wrap: 20
                    font:
                        size: 10px
                        fill: global.color.ferry_name
                        stroke: { color: global.color.ferry_halo, width: 4px }
                        style: italic

    airports:
        data: { source: osm, layer: transportation }
        enabled: global.show_polygons
        filter: { aeroway: true }

        footprint:
            filter: { aeroway: aerodrome }
            draw:
                polygons:
                    visible: global.show_land_polygons
                    style: global.earth_style
                    order: global.order.airport
                    color: global.color.airport

        taxiways:
            filter: { aeroway: taxiway, $zoom: { min: 13 } }
            draw:
                lines:
                    style: unlit-lines
                    color: global.color.taxiway
                    order: global.order.taxiway
                    width: [[13, 0px], [14, 2px], [17, 10px]]

        runways:
            filter: { aeroway: [runway, airstrip], $zoom: { min: 12 } }
            draw:
                lines:
                    style: unlit-lines
                    color: global.color.runway_13  #[[13, global.color.runway_13], [16, global.color.runway_16]]
                    width: [[12, 3px], [13, 5px], [14, 10px], [15, 75]]
                    order: global.order.runway
                    cap: square
                    #outline:
                    #    color: global.color.runway_casing
                    #    width: [[11, 0px], [12, 1px], [13, 2px], [15, 12.5]]

    airport_name:
        data: { source: osm, layer: transportation }
        filter:
            aeroway: aerodrome
            any:
                - { aerodrome: international, $zoom: { min: 12 } }
                - { aerodrome: regional, $zoom: { min: 13 } }
                - $zoom: { min: 14 }
        draw:
            text:
                interactive: true
                text_source: global.names_one_line
                transition: { show: { time: 0s }, hide: { time: 1s } }
                font:
                    family: global.primary_font
                    fill: global.color.airport_name
                    stroke: { color: global.color.default_halo, width: 2 }
                    size: [[12, 12px], [13, 14px]]

    bicycle:
        data: { source: osm, layer: transportation }
        enabled: global.show_bike
        filter:
            - bicycle: [designated, yes]
            - highway: cycleway
            - cycleway: true
            - cycleway_right: true
            - cycleway_left: true
            - mtb_scale: true
        draw:
            lines:
                style: unlit-lines
                color: global.color.bike_lane
                width: [[13, 1.5px], [14, 2px]]
                order: global.order.bicycle
        track:
            exclusive: true
            priority: 1
            filter:
                - bicycle: [designated, yes]
                - highway: cycleway
                - cycleway: [track, opposite_track]
                - cycleway_left: [track, opposite_track]
                - cycleway_right: [track, opposite_track]
                - mtb_scale: true
            draw: { lines: { color: global.color.bike_path } }
            unpaved:
                filter: [ { surface: unpaved }, { mtb_scale: true } ]
                draw: { lines: { style: dashed-bike, color: global.mtb_color_fn } }
        lane:
            exclusive: true
            priority: 2
            filter:
                - cycleway: [lane, opposite_lane]
                - cycleway_left: [lane, opposite_lane]
                - cycleway_right: [lane, opposite_lane]
            draw: { lines: { color: global.color.bike_lane } }
        shared:
            exclusive: true
            priority: 3
            filter:
                - cycleway: [shared_lane, shoulder]
                - cycleway_left: [shared_lane, shoulder]
                - cycleway_right: [shared_lane, shoulder]
            draw: { lines: { style: dashed-bike, color: global.color.bike_lane } }

    transit:
        data: { source: osm, layer: transit }
        enabled: global.show_transit
        filter:
            $zoom: {min: 8}
            any:
                - { route: train }
                - { route: subway, $zoom: {min: 10} }
                - { route: [light_rail, tram, monorail], $zoom: {min: 12} }
                - { route: [bus, trolleybus], $zoom: {min: 14} }
        draw:
            lines:
                width: [[10, 2px], [13, 3px], [14, 4px]]
                order: global.transit_order_fn
                #style: transit-lines
                style: unlit-lines
                color: global.transit_color_fn
            text:
                interactive: true
                priority: global.priority.transit_ref
                text_source: ref  #'function() { return feature.ref.length < 6 ? feature.ref : ''; }'
                # non-zero offset bypasses addCurvedTextLabels, which generates massive number of label
                #  objects, resulting in label collider pegging CPU
                offset: [0px, -0.5px]
                repeat_distance: 400px
                font:
                    family: global.primary_font
                    fill: white  #'function() { return feature.color == "yellow" ? "#555": "white"; }'
                    stroke:
                        color: global.transit_color_fn
                        width: 3
                    size: 14px
        secondary:
            filter: { route: [light_rail, tram, monorail] }
            draw:
                lines: { width: [[13, 2px], [14, 3px]] }
                text: { priority: global.priority.transit_ref_tram }
        bus:
            filter: { route: [bus, trolleybus] }
            draw:
                lines: { width: [[14, 1px], [16, 2px]] }
                text: { priority: global.priority.transit_ref_bus }


    buildings:
        data: { source: osm, layer: building }
        filter: { $zoom: { min: 14 } }
        enabled: global.show_polygons
        draw:
            polygons:
                style: heightglow
                order: global.order.bldg
                color: global.color.bldg

        # extrude 3d buildings ... change to min_height and height attrs once tiles updated
        extruded:
            filter: { $zoom: { min: 15 } }
            draw:
                polygons:
                    # JS call much slower than extruding geometry
                    #extrude: function () { return feature.render_height > 20 || $zoom >= 16; }
                    extrude: ["render_min_height", "render_height"]
                    color: global.color.bldg_3d
                    order: global.order.bldg_3d
                lines:
                    style: heightglowline
                    width: [[15, 1px], [17, 2px]]
                    color: global.color.bldg_3d_line
                    order: global.order.bldg_3d_line
                    extrude: ["render_min_height", "render_height"]


    housenumber:
        data: { source: osm, layer: building }
        filter: { $zoom: { min: 19 } }
        #enabled: false
        draw:
            text:
                priority: global.priority.housenumber
                text_source: housenumber
                font:
                    family: global.primary_font
                    size: 11px
                    fill: global.color.housenumber
                    stroke: { color: global.color.housenumber_halo, width: 2px }


    pois:
        data: { source: osm, layer: poi }
        draw:
            points:
                texture: pois
                interactive: true
                collide: true
                transition: { show: { time: 0s }, hide: { time: 1s } }
                text:
                    interactive: true
                    text_source: global.names_one_line
                    font:
                        family: global.primary_font
                        size: 12px
                        fill: global.color.default_label
                        stroke: { color: global.color.default_halo, width: 3 }

        peak:
            exclusive: true
            filter:
                all:
                    - any: [ { natural: [peak, volcano] }, { class: [peak, volcano] } ]
                    - any: [ { $zoom: { min: 17 } }, global.show_trails ]
                ele: true
            draw:
                points:
                    sprite: peak
                    size: 14px
                    priority: function() { return global.priority.peak + (1 - feature.ele/16384.0); }
                    text:
                        text_source: |
                            function() {
                                const name = global.show_name_en && feature.name_en ? feature.name_en : feature.name;
                                const ele = global.metric_units ? feature.ele : feature.ele*3.2808399;
                                if(!name) { return ele.toFixed(0); }
                                const elided = name.length > 17 ? name.substring(0, 17) + "…" : name;
                                return elided + "\n" + ele.toFixed(0);
                            }
                        text_wrap: 100
                        max_lines: 2
                        font:
                            style: italic
                            size: 10.67px

        saddle:
            exclusive: true
            filter:
                natural: saddle
                any: [ { $zoom: { min: 17 } }, global.show_trails ]
                name: true
            draw:
                points: { visible: false }
                text:
                    text_source: global.names_one_line
                    transition: { show: { time: 0s }, hide: { time: 1s } }
                    priority: global.priority.saddle
                    font:
                        family: global.primary_font
                        size: 9.5px
                        style: italic
                        fill: global.color.default_label
                        stroke: { color: global.color.default_halo, width: 3 }

        forest:
            exclusive: true
            filter:
                 name: true
                 any:
                    - { boundary: national_park, $zoom: { min: 8 } }
                    #boundary: protected_area, leisure: nature_reserve
                    - { protect_class: [1, 1a, 1b, 2, 3], $zoom: { min: 10 } }
                    - { any: [ { landuse: forest }, { natural: wood } ], $zoom: { min: 11 } }
            draw:
                points: { visible: false }
                text:
                    visible: false
                    text_source: global.names_one_line
                    transition: { show: { time: 0s }, hide: { time: 1s } }
                    priority: global.priority.forest
                    font:
                        family: global.primary_font
                        size: 12px
                        style: italic
                        fill: global.color.park_name
                        stroke: { color: global.color.park_halo, width: 3 }
            show:
                filter:
                    - $zoom: { max: 11 }
                    - all: [ global.show_land_polygons, { $zoom: { max: 12 } } ]
                draw: { text: { visible: true } }

        traffic_signal:
            exclusive: true
            filter: { $zoom: { min: 19 }, highway: traffic_signals }
            draw:
                points:
                    interactive: false
                    sprite: traffic_light
                    priority: global.priority.traffic_light
                    text: { visible: false }

        cave:
            exclusive: true
            filter: { $zoom: { min: 15 }, natural: cave_entrance }
            draw:
                points:
                    sprite: cave
                    size: 20px
                    priority: global.priority.cave
                    text: { font: { size: 11px, style: italic } }
            hide_text:
                filter: { $zoom: { max: 16 } }
                draw: { points: { text: { visible: false } } }

        spring:
            exclusive: true
            filter: { $zoom: { min: 15 }, natural: [spring, hot_spring, fumarole, geyser] }
            draw:
                points:
                    style: poi-points
                    sprite: spring
                    color: global.color.spring
                    size: 24px  #[[16, 14px], [18, 18px]]
                    priority: global.priority.spring
                    text:
                        font:
                            size: 11px
                            style: italic
                            fill: global.color.spring
                            stroke: { color: global.color.default_halo, width: 2 }
            hide_text:
                filter: { $zoom: { max: 17 } }
                draw: { points: { text: { visible: false } } }

        icon_pois:
            # not exclusive, so lower priority than above
            draw:
                points:
                    style: poi-points
                    size: [[13, 16px], [16, 18px]]
                    text:
                        anchor: [right, left, bottom, top]
                        max_lines: 2

            park:
                exclusive: true
                priority: 10
                filter:
                    - { leisure: [park, golf_course], name: true }
                    - { amenity: grave_yard }
                    - { landuse: cemetery }
                    - { tourism: zoo, name: true }
                draw:
                    points:
                        visible: false
                        color: global.poi_color.outdoor
                        text:
                            font:
                                size: 13px
                                style: italic
                                fill: global.color.park_name
                                stroke: { color: global.color.park_halo, width: 3 }
                park:
                    filter: [ { leisure: park }, { tourism: zoo } ]
                    draw:
                        points:
                            sprite: tree
                            priority: global.priority.park
                            text: { font: { size: 14px } }
                golf:
                    filter: { leisure: golf_course }
                    draw: { points: { sprite: golf, priority: global.priority.golf } }
                cemetery:
                    filter: [ { amenity: grave_yard }, { landuse: cemetery } ]
                    draw: { points: { sprite: cemetery, priority: global.priority.cemetery } }
                show:
                    filter:
                        - { leisure: park, $zoom: { min: 14 }, area: { min: 1500px2 } }
                        - { $zoom: { min: 17 } }
                        - { area: { min: 2000px2 } }
                    draw: { points: { visible: true } }

            station:
                exclusive: true
                priority: 20
                filter:
                    any:
                        - railway: [station, halt, tram_stop]
                        - amenity: [ferry_terminal]
                    $zoom: { min: 13 }
                # show_transit: stations at 13, station labels at 14; default: stations at 15, station labels at 16
                # - trying to implement this logic w/o using JS functions was a horrible disaster
                draw:
                    points:
                        visible: 'function() { return $zoom >= (global.show_transit ? 13 : 14); }'
                        priority: 'function() { return global.show_transit ? global.priority.station_transit : global.priority.station_default; }'
                        sprite: train
                        color: global.poi_color.public
                        size: [[13, 12px], [15, 18px]]
                        text:
                            optional: 'function() { return !global.show_transit; }'
                ferry:
                    filter: { amenity: [ferry_terminal] }
                    draw:
                        points:
                            # ferry route lines indicate ferry terminals, so we can wait to show poi
                            visible: 'function() { return $zoom >= (global.show_transit ? 14 : 15); }'
                            sprite: ferry
                # some stations have railway=station, station=light_rail, so we need this sublayer to override parent
                tram:
                    filter: [ { railway: tram_stop }, { station: light_rail } ]
                    draw:
                        points:
                            sprite: tram
                            priority: |
                                function() {
                                    return 1 + (global.show_transit ? global.priority.station_transit : global.priority.station_default);
                                }
                            size: [[13, 10px], [15, 16px]]
                            visible: 'function() { return $zoom >= (global.show_transit ? 15 : 17); }'
                            text:
                                visible: 'function() { return $zoom >= (global.show_transit ? 17 : 19); }'

            bus_stop:
                exclusive: true
                priority: 40
                filter: { highway: bus_stop, $zoom: { min: 16 } }
                draw:
                    points:
                        sprite: bus
                        color: global.poi_color.public
                        size: [[16, 12px], [18, 16px]]
                        visible: global.show_transit
                        priority: global.priority.bus_stop
                        text: { visible: false }
                default:
                    filter: { $zoom: { min: 19 } }
                    draw: { points: { visible: true } }

            # these POIs will be hidden by search results (while those above will not)
            not_landuse:
                exclusive: true
                priority: 50
                filter:
                    $zoom: { min: 14 }
                    any:
                        - name: true
                        - tourism: [viewpoint, camp_site, information]
                        - highway: [trailhead]
                        - amenity: [parking, bicycle_rental, drinking_water, water_point, toilets]
                    not:
                        - { railway: subway_entrance }
                draw:
                    points:
                        sprite: global.poi_sprite_fn
                        color: global.poi_color_fn
                        priority: global.priority.poi_default
                        # transition.selected < 0 to indicate label should be hidden when search results shown
                        transition: { selected: { time: -1s } }
                # make label optional at higher zoom to show more POI icons
                labels:
                    filter: { $zoom: { min: 17 } }
                    draw: { points: { text: { optional: true } } }
                # add generic icon at high zoom
                generic:
                    filter: { $zoom: { min: 18 }, name: true }
                    draw: { points: { sprite_default: generic } }
                special:
                    hike_camp_view:
                        exclusive: true
                        priority: 1
                        filter: [ { tourism: [viewpoint, camp_site] }, { highway: [trailhead] } ]
                        draw:
                            points:
                                visible: global.show_trails
                                priority: global.priority.poi_viewpoint
                        default:
                            filter: { $zoom: { min: 17 } }
                            draw: { points: { visible: true } }
                    information:
                        exclusive: true
                        priority: 2
                        filter: { tourism: information }
                        draw: { points: { visible: false } }
                        show:
                            filter: { $zoom: { min: 17 } }
                            draw: { points: { visible: true } }
                    parking:
                        exclusive: true
                        filter: { amenity: parking }
                        draw:
                            points:
                                visible: global.show_parking
                                priority: global.priority.poi_parking
                        default:
                            filter: { $zoom: { min: 18 } }
                            draw: { points: { visible: true } }
                    bike_rental:
                        exclusive: true
                        filter: { amenity: bicycle_rental }  #{ class: amenity, subclass: bicycle_rental }
                        draw: { points: { visible: global.show_bike } }
                    university:
                        exclusive: true
                        filter: { amenity: university }
                        draw: { points: { priority: global.priority.poi_university } }
                    school:
                        exclusive: true
                        filter: { amenity: [school, college, kindergarten] }
                        draw: { points: { visible: false, priority: global.priority.poi_school } }
                        show:
                            filter: { $zoom: { min: 16 } }
                            draw: { points: { visible: true } }
                    restaurant:
                        exclusive: true
                        filter: { amenity: [restaurant, fast_food] }
                        draw: { points: { priority: global.priority.poi_restaurant } }
                    cafe:
                        exclusive: true
                        filter:
                            - amenity: [cafe, ice_cream]
                            - shop: [beverages, confectionery, bakery, pastry]
                        draw: { points: { priority: global.priority.poi_cafe } }
                    grocery:
                        exclusive: true
                        filter: { shop: supermarket }
                        draw: { points: { priority: global.priority.poi_grocery } }
                    convenience:
                        exclusive: true
                        filter: { shop: [convenience, greengrocer, deli, delicatessen, butcher, farm] }
                        draw: { points: { priority: global.priority.poi_convenience } }
                    culture:
                        exclusive: true
                        filter:
                            - amenity: [cinema, theatre, concert_hall, arts_centre, library]
                            - tourism: [museum, attraction, artwork, theme_park]
                            - historic: monument
                        draw: { points: { priority: global.priority.poi_culture } }
                    church:
                        exclusive: true
                        filter: { amenity: place_of_worship }
                        draw: { points: { visible: false, priority: global.priority.poi_religion } }
                        show:
                            filter: { $zoom: { min: 16 } }
                            draw: { points: { visible: true } }
                    toilet:
                        exclusive: true
                        filter: { amenity: [drinking_water, water_point, toilets] }
                        draw: { points: { visible: false, priority: global.priority.poi_toilet } }
                        show:
                            filter: { $zoom: { min: 18 } }
                            draw: { points: { visible: true } }

    boundaries:
        data: { source: osm, layer: boundary }
        filter: { admin_level: [2, 3, 4] }
        draw:
            lines:
                style: unlit-lines
                order: global.order.border
                width: 1px
                color: global.color.border

            text:
                priority: global.priority.boundary
                text_source: global.names_one_line  #{ left: "", right: global.names_one_line } -- need to fix tilemaker
                font:
                    family: global.primary_font
                    size: 12px
                    fill: global.color.place_name
                    stroke: { color: global.color.place_halo, width: 4 }
                    transform: uppercase

        region:
            filter: { admin_level: [3, 4] }
            draw: { text: { font: { size: 10px } } }

        country:
            filter: { admin_level: 2 }
            draw:
                lines:
                    color: global.color.border_country
                    width: 1px
                text: { font: { weight: global.bold_weight } }
            disputed:
                filter: { disputed: true }
                draw: { lines: { style: dashed-border } }

        region:
            filter: { admin_level: [3, 4] }
            draw: { lines: { style: dashed-border } }

    places:
        data: { source: osm, layer: place }

        continents:
            filter: { class: continent, $geometry: point }
            draw:
                text:
                    text_source: global.names_two_lines
                    priority: global.priority.continent
                    font:
                        family: global.primary_font
                        size: 12px
                        fill: global.color.place_name
                        stroke: { color: global.color.place_halo, width: 4 }
                        transform: uppercase

        # city labels with points - there may be some strange behavior due to proxy tiles w/ z < 9 when
        #  tiles with z >= 9 are missing
        city-points:
            filter:
                class: city
                $zoom: { max: 9 }
                any:
                    - rank: false
                    - { rank: { max: 1 }, $zoom: { min: 3 } }  # note that upper limit is in included!
                    - { rank: { max: 3 }, $zoom: { min: 4 } }
                    - { rank: { max: 4 }, $zoom: { min: 5 } }
                    - { rank: { max: 6 }, $zoom: { min: 6 } }
                    - { rank: { max: 7 }, $zoom: { min: 7 } }
                    - { rank: { max: 10 }, $zoom: { min: 8 } }
            draw:
                points:
                    size: 6px
                    color: global.color.city_point
                    priority: global.priority.place_fn
                    #collide: false
                    interactive: true
                    outline: { color: global.color.city_point_halo, width: 1px }
                    text:
                        text_source: global.names_two_lines
                        priority: global.priority.place_fn
                        #collide: true
                        #optional: false
                        interactive: true
                        font:
                            family: global.primary_font
                            fill: global.color.place_name
                            stroke: { color: global.color.place_halo, width: 4 }
                            #transform: uppercase
                            weight: global.bold_weight
                            size: [[8, 10px], [12, 16px]]
            city-100k:
                filter: { population: { min: 100000, max: 500000 } }
                draw: { points: { text: { font: { size: [[8, 12px], [12, 18px]] } } } }
            city-500k:
                filter: { population: { min: 500000 } }
                draw: { points: { text: { font: { size: [[6, 12px], [8, 14px], [12, 20px]] } } } }


        # places w/text-only labels (not accompanying point)
        text-only:
            draw:
                text:
                    visible: false
                    interactive: true
                    text_source: global.names_two_lines
                    priority: global.priority.place_fn
                    font:
                        family: global.primary_font
                        size: 12px
                        fill: global.color.place_name
                        stroke: { color: global.color.place_halo, width: 4 }
                        #transform: uppercase

            countries:
                exclusive: true
                filter:
                    place: country
                    any:
                        - { population: { min: 10000000 } }
                        - { $zoom: { min: 5, max: 8 }, population: 0 }
                        - { $zoom: { min: 5, max: 8 }, population: { min: 1000000 } }
                        - { $zoom: { min: 6, max: 8 } }
                draw:
                    text:
                        visible: true
                        text_source: global.names_one_line_fn
                        font: { weight: 600, size: [[6, 14px], [8, 20px]] }

            regions:
                exclusive: true
                filter:
                    class: [state, province]
                    $zoom: { min: 5, max: 9 }
                draw:
                    text:
                        visible: true
                        font:
                            size: [[6, 12px], [8, 16px]]
                            transform: uppercase
                # use short name when available at low-zooms
                short:
                    filter: { $zoom: { max: 7 } }
                    draw: { text: { text_source: 'ref' } }

            cities:
                exclusive: true
                filter:
                    class: [city, town, village, suburb, hamlet]
                    not: { place_CN: [county, district, banner, subdistrict, neighbourhood] }
                    $zoom: { min: 9 } # show city point labels below z11
                city:
                    filter: { class: city, $zoom: { min: 9, max: 14 } }
                    draw: { text: { visible: true, font: { weight: global.bold_weight, size: [[8, 10px], [12, 16px]] } } }
                    city-100k:
                        filter: { population: { min: 100000, max: 500000 } }
                        draw: { text: { font: { size: [[8, 12px], [12, 18px]] } } }
                    city-500k:
                        filter: { population: { min: 500000 } }
                        draw: { text: { font: { size: [[8, 14px], [12, 20px]] } } }
                town:
                    filter: { class: town, $zoom: { min: 9, max: 14 } }
                    draw: { text: { visible: true, font: { size: [[8, 10px], [12, 14px]] } } }
                village:
                    filter: { class: village, $zoom: { min: 10, max: 15 } }
                    draw: { text: { visible: true, font: { size: [[8, 9px], [12, 12px]] } } }
                hamlet:
                    filter: { class: [suburb, hamlet], $zoom: { min: 13, max: 15 } }
                    draw: { text: { visible: true, font: { size: [[8, 8px], [12, 10px]] } } }

            neighborhoods:
                exclusive: true
                filter:
                    - { class: [neighbourhood, quarter], $zoom: { min: 13, max: 19 } }
                    - { place_CN: [subdistrict, neighbourhood], $zoom: { min: 13, max: 17 } }
                    - { place_CN: [district], $zoom: { min: 11, max: 14 } }  # usually tagged with place=city
                    #- { class: microhood, $zoom: { min: 15 } }
                draw:
                    text:
                        visible: false
                        priority: global.priority.neighborhood
                        interactive: false
                        font:
                            size: [[13, 11px], [14, 11px], [15, 13px]]
                            style: italic
                            fill: global.color.hood_name
                            stroke: { color: global.color.hood_halo }
                            transform: uppercase
                japan_chome:
                    # Japan "chome" districts tagged as neighborhoods in OSM - much smaller than neighborhoods
                    #  in other countries, so adjust zoom level range
                    exclusive: true
                    priority: 1
                    filter: global.japan_bounds
                    shown:
                        filter: { $zoom: { min: 17, max: 19 } }
                        draw:
                            text:
                                visible: true
                                #priority: global.priority.housenumber
                                font:
                                    size: 12px
                china_district:
                    exclusive: true
                    priority: 2
                    filter: { place_CN: [district] }
                    draw:
                        text:
                            visible: true
                            priority: global.priority.district_CN
                            font:
                                fill: global.color.place_name
                                size: [[11, 11px], [12, 11px], [13, 13px]]
                default:
                    # by default, show neighborhoods between z13 and z17
                    filter: { $zoom: { min: 13, max: 17 } }
                    draw: { text: { visible: true } }
