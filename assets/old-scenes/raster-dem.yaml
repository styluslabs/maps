# See raster-contour.yaml for notes

global:
    sdk_api_key: ''
    gui_variables:
        - name: u_exaggerate
          style: hillshade
          label: Hillshade Exaggeration

sources:
    #normals:
    #    type: Raster
    #    url: https://elevation-tiles-prod.s3.amazonaws.com/normal/{z}/{x}/{y}.png
    #    url_params:
    #        api_key: global.sdk_api_key

    elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
        #url: https://elevation-tiles-prod.s3.amazonaws.com/terrarium/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        max_zoom: 14
        filtering: nearest
        cache: terrarium

    osm-raster:
        type: Raster
        #url: http://a.tile.stamen.com/terrain-background/{z}/{x}/{y}.jpg
        url: https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png
        url_subdomains: [a, b, c]
        rasters: [elevation]  #[terrain-normals]
        cache: osm-raster


styles:
    hillshade:
        base: polygons
        raster: custom
        texcoords: true
        shaders:
            defines:
                # not sure if there is any way to figure this out in shader
                ELEVATION_MAX_ZOOM: 14.0
            uniforms:
                u_exaggerate: 1.5
            blocks:
                global: |
                    #ifdef TANGRAM_FRAGMENT_SHADER
                    float getElevation(sampler2D tex, vec2 uv) {
                        vec4 h = texture2D(tex, uv);
                        return (h.r*256. + h.g + h.b/256.)*255. - 32768.;  // in meters
                    }
                    #endif

                normal: |
                    // Using 9 texel patch, estimate 1st and 2nd deriv to smooth elevation and normal
                    vec2 texwh = rasterPixelSize(1);
                    vec2 duv = 1./texwh;
                    vec2 ij = currentRasterUV(1) * texwh;
                    vec2 cen_ij = floor(ij) + 0.5;
                    vec2 uv = cen_ij*duv;
                    float h00 = getElevation(u_rasters[1], uv - duv);
                    float h01 = getElevation(u_rasters[1], uv + vec2(-duv.x, 0.));
                    float h02 = getElevation(u_rasters[1], uv + vec2(-duv.x, duv.y));
                    float h10 = getElevation(u_rasters[1], uv + vec2(0., -duv.y));
                    float h11 = getElevation(u_rasters[1], uv);
                    float h12 = getElevation(u_rasters[1], uv + vec2(0., duv.y));
                    float h20 = getElevation(u_rasters[1], uv + vec2(duv.x, -duv.y));
                    float h21 = getElevation(u_rasters[1], uv + vec2(duv.x, 0.));
                    float h22 = getElevation(u_rasters[1], uv + duv);
                    // handle edge of tile (poorly)
                    bvec2 bot = lessThan(cen_ij, vec2(1.));
                    bvec2 top = greaterThan(cen_ij + 1., texwh);
                    if(bot.x) { h00 = 2.*h10 - h20; h01 = 2.*h11 - h21; h02 = 2.*h12 - h22; }
                    if(top.x) { h20 = 2.*h10 - h00; h21 = 2.*h11 - h01; h22 = 2.*h12 - h02; }
                    if(bot.y) { h00 = 2.*h01 - h02; h10 = 2.*h11 - h12; h20 = 2.*h21 - h22; }
                    if(top.y) { h02 = 2.*h01 - h00; h12 = 2.*h11 - h10; h22 = 2.*h21 - h20; }
                    // proj meters per elevation tile pixel (u_tile_origin.z is tile zoom, u_map_position.z is real zoom)
                    vec2 dxy_elev = 2.*3.141592*6378137.0*exp2(-min(ELEVATION_MAX_ZOOM, u_tile_origin.z))*duv;
                    // offset from pixel center
                    vec2 f = ij - cen_ij;
                    // 2nd order finite diff - mixed partials needed to (almost) eliminate hillshading pixelation
                    float ddxy = (h22 - h20 - h02 + h00)/4.;
                    mat2 curv = mat2(h21 - 2.*h11 + h01, ddxy, ddxy, h12 - 2.*h11 + h10);
                    // interpolated slope and elevation
                    vec2 grad0 = vec2(h21 - h01, h12 - h10)/2.0;
                    vec2 grad = (grad0 + curv*f)/dxy_elev;
                    float elev = h11 + dot(f, grad0) + 0.5*dot(f, curv*f);  // 2nd order does help a bit w/ contour lines
                    // no underwater terrain for now
                    float hscale = elev > 0. ? u_exaggerate : 0.;  // /pow(u_meters_per_pixel, 0.7)/65536.;
                    normal = normalize(vec3(-hscale*grad, 1.));

                color: |
                    color = sampleRaster(0); // color from first raster (basemap)


lights:
    # point1: { type: point, position: [0, 0, 200px], origin: ground }
    light2: { type: directional, direction: [1, 1, -.9], diffuse: 0.8, ambient: 0.3 }


layers:
    earth:
        data: { source: osm-raster }
        draw:
            hillshade:
                color: white
                order: 0
